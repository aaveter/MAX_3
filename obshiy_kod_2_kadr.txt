//Загружаю все созданные карты
var mini_maps_place:Sprite=new Sprite  ;
var mini_maps:Array=new Array  ;
var map_size_text:Array=new Array  ;
var mst_format:TextFormat = new TextFormat();
var maps_ref:FileReferenceList=new FileReferenceList();
var i:int=0;
var qx:int = Math.floor((doc_x-20)/(map_x+mmd));//Количество мини-карт которое помещается в кадре
var cmm:Sprite=new Sprite  ;//Показывает, что выбрана именно эта карта
cmm.graphics.lineStyle(2, 0x000099);
cmm.graphics.drawRect(0, 0, 250, 250);

addChild(mini_maps_place);

var urlRequest:URLRequest = new URLRequest("maps_list.txt");
var urlLoader:URLLoader = new URLLoader();
urlLoader.dataFormat = URLLoaderDataFormat.VARIABLES;
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
var mapsCount:int = 0; 

var urlRequestMap:URLRequest;
var urlLoaderMap:URLLoader;
 
function urlLoader_complete(evt:Event):void {
    //lbl.text = "maps files =";// + urlLoader.data.maps_files;
	//lbl.appendText( "count = " + urlLoader.data.maps_count );
	mapsCount = urlLoader.data.maps_count;
	trace("mapsCount = " + mapsCount.toString());
	
	mini_maps_place.addChild(cmm);
	cmm.x=(map_x+mmd)*(i-qx*Math.floor(i/qx))+20;
	cmm.y=(map_x+mmd+20)*Math.floor(i/qx)+20
	
	urlRequestMap = new URLRequest(urlLoader.data["map" + (i+1).toString()]);
	urlLoaderMap = new URLLoader();
	urlLoaderMap.dataFormat = URLLoaderDataFormat.BINARY;
	urlLoaderMap.addEventListener(Event.COMPLETE, maps_complete);
	urlLoaderMap.load(urlRequestMap);
}

/*maps_ref.browse();
maps_ref.addEventListener(Event.SELECT, maps_selected);
function maps_selected(evt:Event):void {
	mini_maps_place.addChild(cmm);
	cmm.x=(map_x+mmd)*(i-qx*Math.floor(i/qx))+20;
	cmm.y=(map_x+mmd+20)*Math.floor(i/qx)+20;
	maps_ref.fileList[i].addEventListener(Event.COMPLETE, maps_complete);
	maps_ref.fileList[i].load();
}*/





//maps_ref.fileList[i].addEventListener(Event.COMPLETE, maps_complete);
//maps_ref.fileList[i].load();

function maps_complete(evt:Event) {
	var cell:Array=new Array  ;
	var map_size:int=urlLoaderMap.data.readInt();
	mini_maps[i]=new Sprite  ;
	map_size_text[i]=new TextField  ;
	for (var gor:int = 0; gor<map_size; gor++) {
		cell[gor]=new Array  ;
		for (var vert:int = 0; vert<map_size; vert++) {
			cell[gor][vert]=urlLoaderMap.data.readUTF();
			//trace(i,maps_ref.fileList[i].data.position);			
			if (cell[gor][vert]=="green") {
				mini_maps[i].graphics.beginBitmapFill(mini_green);
			} else if (cell[gor][vert]=="water") {
				mini_maps[i].graphics.beginBitmapFill(mini_water);
			} else if (cell[gor][vert]=="montain") {
				mini_maps[i].graphics.beginBitmapFill(mini_montain);
			}
			mini_maps[i].graphics.drawRect(mini_cs*gor, mini_cs*vert, mini_cs, mini_cs);
			mini_maps[i].graphics.endFill();
		}
	}
	mst_format=STATIC_text;
	mst_format.size=12;
	map_size_text[i].text="Карта размером "+map_size+" на "+map_size;
	map_size_text[i].setTextFormat(mst_format);
	map_size_text[i].x=(map_x+mmd)*(i-qx*Math.floor(i/qx))+20;
	map_size_text[i].y=(map_x+mmd+20)*Math.floor(i/qx);
	map_size_text[i].width=map_x;
	map_size_text[i].height=20;
	mini_maps[i].width=map_x;
	mini_maps[i].height=map_x;
	mini_maps[i].x=(map_x+mmd)*(i-qx*Math.floor(i/qx))+20;
	mini_maps[i].y=(map_x+mmd+20)*Math.floor(i/qx)+20;
	mini_maps[i].addEventListener(MouseEvent.CLICK,mm_click);
	mini_maps_place.addChild(mini_maps[i]);
	mini_maps_place.addChild(map_size_text[i]);

	if (i<mapsCount-1) {
		i+=1;

	urlRequestMap = new URLRequest(urlLoader.data["map" + (i+1).toString()]);
	urlLoaderMap = new URLLoader();
	urlLoaderMap.dataFormat = URLLoaderDataFormat.BINARY;
	urlLoaderMap.addEventListener(Event.COMPLETE, maps_complete);
	urlLoaderMap.load(urlRequestMap);

		//maps_ref.fileList[i].addEventListener(Event.COMPLETE, maps_complete);
		//maps_ref.fileList[i].load();
	} else {
		i=0;
		finalize();
	}
}
function mm_click(event:MouseEvent) {
	i=Math.floor((mouseX-mini_maps_place.x)/(map_x+mmd))+qx*Math.floor((mouseY-mini_maps_place.y)/(map_x+mmd));
	cmm.x=(map_x+mmd)*(i-qx*Math.floor(i/qx))+20;
	cmm.y=(map_x+mmd+20)*Math.floor(i/qx)+20;
}

function finalize() {	
	var Ok_2=new Ok_class  ;
	addChild(Ok_2);
	Ok_2.x=(doc_x-Ok_2.width)/2;
	Ok_2.y=doc_y-Ok_2.height-100;
	Ok_2.addEventListener(MouseEvent.CLICK, press_Ok_2);
}

function press_Ok_2(event:MouseEvent) {
	//Удаляю предидущий кадр
	while (numChildren != 0) {
		removeChildAt(numChildren-1);
	}
	gotoAndStop(3);
}